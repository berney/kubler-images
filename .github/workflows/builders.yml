name: Bake Builders
on:
  #push:
  #  branches:
  #    - main
  workflow_dispatch:
    inputs:
      portage_date:
        description: The date (tag) of the latest portage image (e.g. `20241231`)
        required: true
        # Could be `latest` or a date like `20241231`
        type: string
        default: latest
      portage_image:
        description: Portage Image (e.g. `ghcr.io/berney/kubler-images/portage:20241231`)
        required: true
        type: string
        default: ghcr.io/berney/kubler-images/portage:latest
  workflow_call:
    inputs:
      portage_date:
        description: The date (tag) of the latest portage image (e.g. `20241231`)
        required: true
        # Could be `latest` or a date like `20241231`
        type: string
      portage_image:
        description: Portage Image (e.g. `ghcr.io/berney/kubler-images/portage:20241231`)
        required: true
        type: string
    # Secrets need to be declared here otherwise they won't be available when this workflow is called
    secrets:
      LIGOLO_PROXY:
        description: Ligolo-ng proxy (server) address
        required: false
      AZURE_CLIENT_ID:
        description: Azure Client ID of a service principal or a user-assigned managed identity
        required: true
      AZURE_TENANT_ID:
        description: Azure login Tenant ID
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: Azure login Subscription ID
        required: true
      AZURE_STORAGE_ACCOUNT:
        description: Azure Storage Account for Blob Storage, for shared caching of Gentoo binpkgs
        required: true
      AZURE_STORAGE_ACCOUNT_ACCESS_KEY:
        description: Azure Storage Account Access Key
        required: true
      AZURE_STORAGE_CONTAINER:
        description: Azure Storage Container for Blob Storage, for shared caching of Gentoo binpkgs
        required: true
      AZURE_CACHE_FOR_REDIS_ACCESS_KEY:
        description: Azure Cache for Redis Access Key for JuiceFS Metadata Server
        required: true

permissions:
  id-token: write
  contents: read
  packages: write

# Jobs run in parallel
# Jobs are independent with separate file systems, IP addresses, etc.
jobs:
  builders:
    runs-on: ubuntu-latest
    env:
      KUBLER_IMAGE: ghcr.io/${{ github.repository }}
      PORTAGE_DATE: ${{ inputs.portage_date }}
      PORTAGE_IMAGE: ${{ inputs.portage_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: bob
            cache-key-prefix: bob-glibc
            stage3:
              base: gentoo/stage3:hardened
              tmp_image: ghcr.io/${{ github.repository }}/tmp/stage3-amd64-hardened-openrc:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/stage3-amd64-hardened-openrc:${{ inputs.portage_date }}
              cache: stage3-amd64-hardened-openrc
              goss: stage3/amd64-hardened-openrc
            core:
              def_chost: x86_64-pc-linux-gnu
              tmp_image: ghcr.io/${{ github.repository }}/tmp/bob-core:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/bob-core:${{ inputs.portage_date }}
              cache: bob-core
              goss: core/bob-core
            bob:
              target: bob
              tmp_image: ghcr.io/${{ github.repository }}/tmp/bob:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/bob:${{ inputs.portage_date }}
              cache: bob
              goss: builder/bob
          - name: bob-musl
            cache-key-prefix: bob-musl
            stage3:
              base: gentoo/stage3:musl-hardened
              tmp_image: ghcr.io/${{ github.repository }}/tmp/stage3-amd64-musl-hardened:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/stage3-amd64-musl-hardened:${{ inputs.portage_date }}
              cache: stage3-amd64-musl-hardened
              goss: stage3/amd64-musl-hardened
            core:
              def_chost: x86_64-pc-linux-musl
              tmp_image: ghcr.io/${{ github.repository }}/tmp/bob-musl-core:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/bob-musl-core:${{ inputs.portage_date }}
              cache: bob-musl-core
              goss: core/bob-musl-core
            bob:
              target: bob-musl
              tmp_image: ghcr.io/${{ github.repository }}/tmp/bob-musl:${{ inputs.portage_date }}
              image: ghcr.io/${{ github.repository }}/bob-musl:${{ inputs.portage_date }}
              cache: bob-musl
              goss: builder/bob-musl
    steps:
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: üêã Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          # This breaks kubler https://github.com/edannenberg/kubler/issues/215
          # Sets up `docker build` command as an alias to `docker buildx` (default `false`)
          install: true

      - name: üêã Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: oras-project/setup-oras@v1

      # Cache Versions are based off key and path, so differnt path's can use same key
      #
      # Caches are immutable, so need unique key to create a new cache
      # `restore-keys` provides a list to restore a cache when key doesn't match
      # If there's no exact match, the most recent cache that partially matches will be used
      #
      # If no cache can be restored the directory won't be created
      - name: Cache Kubler Gentoo Distfiles
        if: ${{ false }}
        uses: actions/cache@v4
        with:
          path: ~/.kubler/distfiles/
          key: kubler-${{ matrix.cache-key-prefix }}-${{ github.sha }}
          restore-keys: |
            kubler-${{ matrix.cache-key-prefix }}-
            kubler-${{ matrix.name }}-
            kubler-

      - name: Cache Kubler Gentoo Packages
        if: ${{ false }}
        uses: actions/cache@v4
        with:
          path: ~/.kubler/packages/
          key: kubler-${{ matrix.cache-key-prefix }}-${{ github.sha }}
          restore-keys: |
            kubler-${{ matrix.cache-key-prefix }}-
            kubler-${{ matrix.name }}-
            kubler-

      - name: Docker pull agent
        #if: ${{ false }}
        run: |
          docker pull ghcr.io/berney/aether-tunnel/agent || echo "Failed to pull image"

      - name: Extract Agent
        #if: ${{ false }}
        env:
          LIGOLO_PROXY: ${{ secrets.LIGOLO_PROXY }}
        run: |
          docker create --name agent ghcr.io/berney/aether-tunnel/agent
          pwd
          mkdir etc
          docker cp agent:/etc/s6_finish_default etc/
          docker cp agent:/etc/service/ etc/
          docker cp agent:/service/ .
          docker cp agent:/usr/bin/ .
          docker cp agent:/usr/local/bin/ .
          docker rm agent
          touch service/web-shell/down
          touch service/nginx/down
          export PATH="$(pwd)/bin:$PATH"
          mkdir ~/log
          s6-svscan service &

      - name: Inspect
        #if: ${{ false }}
        run: |
          set -eux
          sleep 10
          ps -ef
          pstree
          docker ps
          docker ps -a
          ss -nlt
          ss -nlu
          ip link
          ip addr
          ip -6 addr
          ls -l ~/log/mosh-server/current || true
          cat ~/log/mosh-server/current || true

      - name: ‚òÅÔ∏è  Azure login
        id: azure-login
        continue-on-error: true
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üåßÔ∏è Sleep if azure-login error
        if: ${{ steps.azure-login.outcome == 'failure' }}
        run: |
          set -eux
          LOOPS=12
          for x in $(seq $LOOPS); do
            echo "== $x/$LOOPS"
            ps -ef
            pstree
            docker ps
            docker ps -a
            ss -nlt
            ss -nlu
            ip link
            ip addr
            ip -6 addr
            ls -l ~/log/mosh-server/current || true
            cat ~/log/mosh-server/current || true
            ls -l ~/log/ligolo-ng/current || true
            cat ~/log/ligolo-ng/current || true
            sleep 5m
          done

      - name: üêã Docker Pull stage3
        id: stage3-pull
        continue-on-error: true
        run: |
          set -eu
          docker pull "${{ matrix.stage3.image }}"

      - name: üêãüç≥ Docker Bake Kubler stage3 - test pulled
        id: stage3-pull-test
        if: ${{ steps.stage3-pull.outcome == 'success' }}
        # If the pulled image fails tests, a subsequent step will try baking
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.stage3.image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.stage3.image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.stage3.image }}" eselect profile show
          docker run --rm "${{ matrix.stage3.image }}" sh -c "type gcc"
          docker run --rm "${{ matrix.stage3.image }}" ls -la /usr/bin/gcc /usr/sbin/gcc || true
          cd "${{ matrix.stage3.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "$KUBLER_IMAGE" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.stage3.image }}" validate --color

      - name: üêãüç≥ Docker Bake Kubler stage3 - test pulled - debug
        if: ${{ steps.stage3-pull-test.outcome == 'failure' }}
        # If the pulled image fails tests, a subsequent step will try baking
        continue-on-error: true
        run: |
          set -eux
          cd "${{ matrix.stage3.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "$KUBLER_IMAGE" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.stage3.image }}" -l debug validate --color

      #- name: Check env before exposing GitHub Runtime - grep
      #  run: |
      #    env | grep ^ACTIONS

      #- name: Check env before exposing GitHub Runtime - full
      #  run: |
      #    env

      # Needed for bake-action to use GHA cache
      # XXX I think this may be a bit dangerous, exposing secrets to everything in the job
      - name: Expose GitHub Runtime
        if: ${{ false }}
        uses: crazy-max/ghaction-github-runtime@v3

      #- name: Check env after exposed GitHub Runtime - grep
      #  run: |
      #    env | grep ^ACTIONS

      #- name: Check env after exposed GitHub Runtime - full
      #  run: |
      #    env

      - name: üêãüç≥ Docker Bake Kubler stage3 - list targets
        # Use NOT success so this runs on skipped or failure
        if: ${{ steps.stage3-pull.outcome != 'success' || steps.stage3-pull-test.outcome != 'success' }}
        uses: docker/bake-action/subaction/list-targets@v5
        with:
          workdir: bob-stage3

      - name: üêãüç≥ Docker Bake Kubler stage3
        # Use NOT success so this runs on skipped or failure
        if: ${{ steps.stage3-pull.outcome != 'success' || steps.stage3-pull-test.outcome != 'success' }}
        uses: docker/bake-action@v5
        with:
          workdir: bob-stage3
          push: true
          # In the `docker-bake.hcl`
          # There is a variable `BASE_TAG` and `BASE_IMAGE`. `BASE_IMAGE` interpolates `BASE_TAG`i
          # These can be set with env vars when using `docker buildx bake` command
          # For the gentoo-stage3 target there's no `BASE_TAG` arg, only `BASE_IMAGE` which defaults to `BASE_IMAGE` var
          # When using bake-action we need to set the `BASE_IMAGE` arg, setting `BASE_TAG` arg won't do what we want.
          set: |
            gentoo-stage3.args.BASE_IMAGE=${{ matrix.stage3.base }}
            gentoo-stage3.args.PORTAGE=${{ env.PORTAGE_IMAGE }}
            gentoo-stage3.tags=${{ matrix.stage3.tmp_image }}
            gentoo-stage3.cache-from=type=gha,scope=portage
            gentoo-stage3.cache-from=type=gha,scope=${{ matrix.stage3.cache }}
            gentoo-stage3.cache-to=type=gha,scope=${{ matrix.stage3.cache }}


      - name: üêãüç≥ Docker Bake Kubler stage3 - test baked
        id: stage3-bake-test
        # Use NOT success so this runs on skipped or failure
        if: ${{ steps.stage3-pull.outcome != 'success' || steps.stage3-pull-test.outcome != 'success' }}
        # If this test fails, we will test again with `-l debug` to help troubleshooting, which should fail the job
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.stage3.tmp_image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.stage3.tmp_image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.stage3.tmp_image }}" eselect profile show
          docker run --rm "${{ matrix.stage3.tmp_image }}" sh -c "type gcc"
          docker run --rm "${{ matrix.stage3.tmp_image }}" ls -la /usr/bin/gcc /usr/sbin/gcc || true
          cd "${{ matrix.stage3.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "$KUBLER_IMAGE" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.stage3.tmp_image }}" validate --color

      - name: üêãüç≥ Docker Bake Kubler stage3 - test baked - debug
        if: ${{ steps.stage3-bake-test.outcome == 'failure' }}
        run: |
          set -eux
          cd "${{ matrix.stage3.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "$KUBLER_IMAGE" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.stage3.tmp_image }}" -l debug validate --color

      - name: üêãüç≥ Docker Bake Kubler stage3 - oras cp
        # Use NOT success so this runs on skipped or failure
        if: ${{ steps.stage3-bake-test.outcome == 'success' }}
        env:
          TMP_IMAGE: ${{ matrix.stage3.tmp_image }}
          IMAGE: ${{ matrix.stage3.image }}
        run: |
          set -eux
          # Strip tag from end of string
          LATEST="${IMAGE%:*}"
          oras cp -v "$TMP_IMAGE" "$IMAGE"
          oras cp -v "$TMP_IMAGE" "$LATEST"

      - name: Set KUBLER_BUILD_ROOT_SHA256 Env Var
        run: |
          set -eux
          KUBLER_BUILD_ROOT_SHA256=$(sha256sum -b bob-core/build-root.sh | cut -d' ' -f1)
          echo "KUBLER_BUILD_ROOT_SHA256=$KUBLER_BUILD_ROOT_SHA256" >> $GITHUB_ENV

      - name: üêã Docker Pull bob-core
        id: bob-core-pull
        #if: false
        continue-on-error: true
        run: |
          set -eu
          docker pull "${{ matrix.core.image }}"

      - name: üêãüç≥ Docker Bake Kubler bob-core - test pulled
        id: bob-core-pull-test
        if: ${{ steps.bob-core-pull.outcome == 'success' }}
        # If this fails we will test again with `-l debug` then fail
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.core.image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.core.image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.core.image }}" eselect profile show
          docker run --rm "${{ matrix.core.image }}" ls -l /var/cache
          cd "${{ matrix.core.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.core.image }}" validate --color

      - name: üêãüç≥ Docker Bake Kubler bob-core - test pulled - debug
        if: ${{ steps.bob-core-pull-test.outcome == 'failure' }}
        continue-on-error: true
        run: |
          set -eux
          cd "${{ matrix.core.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.core.image }}" -l debug validate --color

      - name: üêãüç≥ Docker Bake Kubler bob-core - list targets
        # Use NOT success so this runs on skipped or failure
        if: ${{ steps.bob-core-pull.outcome != 'success' || steps.bob-core-pull-test.outcome != 'success' }}
        uses: docker/bake-action/subaction/list-targets@v5
        with:
          workdir: bob-core

      - name: üêãüç≥ Docker Bake Kubler bob-core
        if: ${{ steps.bob-core-pull.outcome != 'success' || steps.bob-core-pull-test.outcome != 'success' }}
        uses: docker/bake-action@v5
        with:
          workdir: bob-core
          push: true
          set: |
            core.args.DEF_CHOST=${{ matrix.core.def_chost }}
            core.args.BASE_IMAGE=${{ matrix.stage3.image }}
            core.tags=${{ matrix.core.tmp_image }}
            core.cache-from=type=gha,scope=portage
            core.cache-from=type=gha,scope=${{ matrix.stage3.cache }}
            core.cache-from=type=gha,scope=${{ matrix.core.cache }}
            core.cache-to=type=gha,scope=${{ matrix.core.cache }}

      - name: üêãüç≥ Docker Bake Kubler bob-core - test baked
        id: bob-core-bake-test
        if: ${{ steps.bob-core-pull.outcome != 'success' || steps.bob-core-pull-test.outcome != 'success' }}
        # If this fails we will test again with `-l debug`, and then fail
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.core.tmp_image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.core.tmp_image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.core.tmp_image }}" eselect profile show
          docker run --rm "${{ matrix.core.tmp_image }}" ls -l /var/cache
          cd "${{ matrix.core.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.core.tmp_image }}" validate --color

      - name: üêãüç≥ Docker Bake Kubler bob-core - test baked - debug
        if: ${{ steps.bob-core-bake-test.outcome == 'failure' }}
        run: |
          set -eux
          cd "${{ matrix.core.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.core.tmp_image }}" -l debug validate --color

      - name: üêãüç≥ Docker Bake Kubler bob-core - oras cp
        if: ${{ steps.bob-core-bake-test.outcome == 'success' }}
        env:
          TMP_IMAGE: ${{ matrix.core.tmp_image }}
          IMAGE: ${{ matrix.core.image }}
        run: |
          set -eux
          # Strip tag from end of string
          LATEST="${IMAGE%:*}"
          oras cp -v "$TMP_IMAGE" "$IMAGE"
          oras cp -v "$TMP_IMAGE" "$LATEST"

      - name: üêã Docker Pull bob
        id: bob-pull
        # Temporary whilst testing changes to get binpkgs working
        #if: ${{ false }}
        continue-on-error: true
        run: |
          set -eu
          docker pull "${{ matrix.bob.image }}"

      - name: üêã Docker Build kubler builder - bob - test pulled
        id: bob-pull-test
        if: ${{ steps.bob-pull.outcome == 'success' }}
        # if this fails we will test again with `-l debug` and then fail
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.bob.image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.bob.image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.bob.image }}" eselect profile show
          docker run --rm "${{ matrix.bob.image }}" ls -l /var/cache
          docker run --rm "${{ matrix.bob.image }}" ls -l /var/cache/eix || true
          docker run --rm "${{ matrix.bob.image }}" eix --selected -c
          docker run --rm "${{ matrix.bob.image }}" rg --version || true
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.bob.image }}" validate --color

      - name: üêã Docker Build kubler builder - bob - test pulled - debug
        if: ${{ steps.bob-pull-test.outcome == 'failure' }}
        continue-on-error: true
        run: |
          set -eux
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.bob.image }}" -l debug validate --color

      - name: üêã Docker Build kubler builder - bob - test pulled - ripgrep
        # https://bugs.gentoo.org/922372 Bug 922372 - sys-apps/ripgrep-14.1.0 fails to compile (MUSL-SYSTEM): = note: ld: cannot find -lpcre2-8: No such file or directory
        id: bob-pull-test-ripgrep
        if: ${{ steps.bob-pull.outcome == 'success' }}
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.bob.image }}" rg --version || true
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint -e GOSS_FILE=goss-ripgrep.yaml "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.bob.image }}" validate --color

      - name: üêã Docker Build kubler builder - bob - test pulled - ripgrep - debug
        if: ${{ steps.bob-pull-test-ripgrep.outcome == 'failure' }}
        # If ripgrep testing fails we keep going
        continue-on-error: true
        run: |
          set -eux
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint -e GOSS_FILE=goss-ripgrep.yaml "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.bob.image }}" -l debug validate --color

      - name: üêã Docker Build kubler builder - bob - list targets
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        uses: docker/bake-action/subaction/list-targets@v5
        with:
          workdir: ${{ matrix.bob.goss }}

      - name: üßÉ Mount JuiceFS
        run: |
          set -eux
          # install juicefs
          curl -LO https://github.com/juicedata/juicefs/releases/download/v1.2.2/juicefs-1.2.2-linux-amd64.tar.gz
          tar xvzf juicefs-1.2.2-linux-amd64.tar.gz juicefs
          rm juicefs-1.2.2-linux-amd64.tar.gz
          sudo mv juicefs /usr/local/bin/
          juicefs version
          # Use Client ID to lookup Object (Principal) ID
          #REDIS_USER=$(az rest --method GET --uri "https://graph.microsoft.com/v1.0/servicePrincipals?\$filter=appId eq '${{ secrets.AZURE_CLIENT_ID }}'" --query "value[0].id" --output tsv)
          #REDIS_PASSWORD=$(az account get-access-token --resource https://redis.azure.com/ --query accessToken --output tsv)
          REDIS_PASSWORD=${{ secrets.AZURE_CACHE_FOR_REDIS_ACCESS_KEY }}
          export REDIS_PASSWORD
          SECRET_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_ACCESS_KEY }}
          export SECRET_KEY
          #juicefs mount rediss://"${REDIS_USER}":@juicefs.redis.cache.windows.net:6380 ~/jfs --background
          juicefs mount rediss://juicefs.redis.cache.windows.net:6380 ~/jfs --background
          juicefs summary ~/jfs
          #juicefs bench ~/jfs
          ls -la ~/jfs
          cat ~/jfs/hello.txt
          date > ~/jfs/test-write.txt
          cat ~/jfs/test-write.txt

      - name: üîó Symlink ~/.kubler/{distfiles,packages}
        run: |
          set -eux
          ls -lad ~/jfs ~/jfs/kubler ~/jfs/kubler/{distfiles,packages} || true
          ls -la ~/jfs ~/jfs/kubler ~/jfs/kubler/{distfiles,packages} || true
          mkdir -p ~/jfs/kubler ~/jfs/kubler/{distfiles,packages}
          mkdir -p ~/.kubler
          ln -sf ~/jfs/kubler/distfiles ~/.kubler/distfiles
          ln -sf ~/jfs/kubler/packages ~/.kubler/packages
          ls -lad ~/.kubler ~/.kubler/{distfiles,packages} || true
          ls -la ~/.kubler ~/.kubler/{distfiles,packages} || true

      - name: Inspect Distfiles Cache - Before
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        continue-on-error: true
        run: |
          set -eux
          # Ensure distfiles exists
          mkdir -p ~/.kubler/distfiles
          cd ~/.kubler/distfiles
          git init || true
          grep -q '/.git/' .dockerignore || echo '/.git/' >> .dockerignore
          git add . || true
          ls -ltra ~/.kubler/distfiles/ | head -n 100

      - name: Inspect Packages Cache - Before
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        continue-on-error: true
        run: |
          set -eux
          # Ensure packages exists
          mkdir -p ~/.kubler/packages
          cd ~/.kubler/packages
          git init || true
          grep -q '/.git/' .dockerignore || echo '/.git/' >> .dockerignore
          git add . || true
          ls -ltra ~/.kubler/packages/
          ls -ltra ~/.kubler/packages/* || true
          tree -aC --filelimit 100 ~/.kubler/packages || true

      - name: Start Portage Binary Package Server
        run: |
          set -eux
          ss -nlt
          docker run --name miniserver-packages --detach --rm -v "${HOME}/.kubler/packages":/packages:ro -p 8080:8080 docker.io/svenstaro/miniserve:0.29.0-alpine /packages
          curl -I http://localhost:8080/x86_64-pc-linux-gnu/Packages

      # This isn't exported in the env context, so we need to set it
      - name: Get HOME directory
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        run: |
          set -eux
          echo "HOME=$HOME" >> $GITHUB_ENV

      # This target has solid `/distfiles/` and `/packages/` directories so we can copy artifacts out for caching
      - name: üêãüç≥ Docker Bake Kubler builder - bob-builder
        id: bob-builder-bake
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        uses: docker/bake-action@v5
        with:
          workdir: ${{ matrix.bob.goss }}
          push: true
          targets: ${{ matrix.bob.target }}-builder
          set: |
            ${{matrix.bob.target}}-builder.args.BASE_IMAGE=${{ matrix.core.image }}
            ${{matrix.bob.target}}-builder.tags=${{ matrix.bob.tmp_image }}-builder
            ${{matrix.bob.target}}-builder.cache-from=type=gha,scope=portage
            ${{matrix.bob.target}}-builder.cache-from=type=gha,scope=${{ matrix.stage3.cache }}
            ${{matrix.bob.target}}-builder.cache-from=type=gha,scope=${{ matrix.core.cache }}
            ${{matrix.bob.target}}-builder.cache-from=type=gha,scope=${{ matrix.bob.cache }}
            ${{matrix.bob.target}}-builder.cache-from=type=gha,scope=${{ matrix.bob.cache }}-builder
            ${{matrix.bob.target}}-builder.cache-to=type=gha,scope=${{ matrix.bob.cache }}-builder
          #  ${{matrix.bob.target}}-builder.contexts.distfiles=${{ env.HOME }}/.kubler/distfiles
          #  ${{matrix.bob.target}}-builder.contexts.packages=${{ env.HOME }}/.kubler/packages

      - name: üêã Docker Build kubler builder - bob-builder - Extract /distfiles/ and /packages for caching
        if: ${{ steps.bob-builder-bake.outcome == 'success' }}
        continue-on-error: true
        run: |
          set -eux
          docker images
          docker run --rm "${{ matrix.bob.tmp_image }}-builder" ls -la /distfiles || true
          docker run --rm "${{ matrix.bob.tmp_image }}-builder" ls -la /packages || true
          # Extract files to host, for caching
          docker create --name "${{ matrix.name }}"-builder "${{ matrix.bob.tmp_image }}"-builder
          #docker cp "${{ matrix.name }}"-builder:/distfiles ~/.kubler/ || true
          # docker cp won't follow symlink in destination
          # > cannot overwrite non-directory "/home/runner/.kubler/distfiles" with directory "/home/runner/.kubler"
          # So use real destination
          docker cp "${{ matrix.name }}"-builder:/distfiles ~/jfs/kubler/ || true
          #docker cp "${{ matrix.name }}"-builder:/packages ~/.kubler/ || true
          docker cp "${{ matrix.name }}"-builder:/packages ~/jfs/kubler/ || true
          docker rm "${{ matrix.name }}"-builder

      - name: Inspect Distfiles Cache - After
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        continue-on-error: true
        run: |
          set -eux
          ls -ltra ~/.kubler/distfiles/ | head -n 100 || true
          cd ~/.kubler/distfiles/
          git status

      - name: Inspect Packages Cache - After
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        continue-on-error: true
        run: |
          set -eux
          ls -ltra ~/.kubler/packages/ || true
          ls -ltra ~/.kubler/packages/* || true
          tree -aC --filelimit 100 ~/.kubler/packages || true
          cd ~/.kubler/packages/
          git status

      # This has ephemeral `/distfiles/` and `/packages/` directories (writes are discarded)
      # Except for this it is identical to the `bob-builder` image we just baked
      # So, the BuildKit cache should mean this target builds quickly with cache hits
      - name: üêãüç≥ Docker Bake Kubler builder - bob
        id: bob-bake
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        uses: docker/bake-action@v5
        with:
          workdir: ${{ matrix.bob.goss }}
          push: true
          targets: ${{ matrix.bob.target }}
          set: |
            ${{matrix.bob.target}}.args.BASE_IMAGE=${{ matrix.core.image }}
            ${{matrix.bob.target}}.tags=${{ matrix.bob.tmp_image }}
            ${{matrix.bob.target}}.contexts.distfiles=${{ env.HOME }}/.kubler/distfiles
            ${{matrix.bob.target}}.contexts.packages=${{ env.HOME }}/.kubler/packages
            ${{matrix.bob.target}}.cache-from=type=gha,scope=portage
            ${{matrix.bob.target}}.cache-from=type=gha,scope=${{ matrix.stage3.cache }}
            ${{matrix.bob.target}}.cache-from=type=gha,scope=${{ matrix.core.cache }}
            ${{matrix.bob.target}}.cache-from=type=gha,scope=${{ matrix.bob.cache }}-builder
            ${{matrix.bob.target}}.cache-from=type=gha,scope=${{ matrix.bob.cache }}
            ${{matrix.bob.target}}.cache-to=type=gha,scope=${{ matrix.bob.cache }}

      - name: üêã Docker Build kubler builder - bob - test baked
        id: bob-bake-test
        if: ${{ steps.bob-bake.outcome == 'success' }}
        # if this fails we will test again with `-l debug` and then fail
        continue-on-error: true
        run: |
          set -eux
          docker pull "${{ matrix.bob.tmp_image }}"
          docker images
          docker run --rm "${{ matrix.bob.tmp_image }}" ls -la /distfiles || true
          docker run --rm "${{ matrix.bob.tmp_image }}" ls -la /packages || true
          docker run --rm "${{ matrix.bob.tmp_image }}" cat /etc/gentoo-release
          docker run --rm "${{ matrix.bob.tmp_image }}" sh -c "grep -E 'Latest|stage3' /latest-stage3*.txt"
          docker run --rm "${{ matrix.bob.tmp_image }}" eselect profile show
          docker run --rm "${{ matrix.bob.tmp_image }}" ls -l /var/cache
          docker run --rm "${{ matrix.bob.tmp_image }}" ls -l /var/cache/eix || true
          docker run --rm "${{ matrix.bob.tmp_image }}" eix --selected -c
          docker run --rm "${{ matrix.bob.tmp_image }}" rg --version || true
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.bob.tmp_image }}" validate --color

      - name: üêã Docker Build kubler builder - bob - test baked - debug
        if: ${{ steps.bob-bake-test.outcome == 'failure' }}
        run: |
          set -eux
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss -e KUBLER_BUILD_ROOT_SHA256="$KUBLER_BUILD_ROOT_SHA256" "${{ matrix.bob.tmp_image }}" -l debug validate --color

      - name: üêã Docker Build kubler builder - bob - test baked ripgrep
        id: bob-bake-test-ripgrep
        if: ${{ steps.bob-pull.outcome != 'success' || steps.bob-pull-test.outcome != 'success' }}
        continue-on-error: true
        run: |
          set -eux
          docker run --rm "${{ matrix.bob.tmp_image }}" rg --version || true
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint -e GOSS_FILE=goss-ripgrep.yaml "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.bob.tmp_image }}" validate --color

      - name: üêã Docker Build kubler builder - bob - test baked ripgrep - debug
        if: ${{ steps.bob-bake-test-ripgrep.outcome == 'failure' }}
        # we keep going if ripgrep testing fails
        continue-on-error: true
        run: |
          set -eux
          cd "${{ matrix.bob.goss }}" || exit 1
          docker run --rm -v /run/docker.sock:/run/docker.sock -v "$(pwd):/src:ro" -w /src -e CONTAINER_MODE=entrypoint -e GOSS_FILE=goss-ripgrep.yaml "${KUBLER_IMAGE}" dgoss run -w /goss --entrypoint /goss/goss "${{ matrix.bob.tmp_image }}" -l debug validate --color

      - name: üêãüç≥ Docker Bake Kubler builder - bob - oras cp
        if: ${{ steps.bob-bake-test.outcome == 'success' }}
        env:
          TMP_IMAGE: ${{ matrix.bob.tmp_image }}
          IMAGE: ${{ matrix.bob.image }}
        run: |
          set -eux
          # Strip tag from end of string
          LATEST="${IMAGE%:*}"
          oras cp -v "$TMP_IMAGE" "$IMAGE"
          oras cp -v "$TMP_IMAGE" "$LATEST"
